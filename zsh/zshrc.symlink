# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

########################################################
# Configuration
########################################################

config_files=($DOTFILES/**/aliases.zsh)
for file in $config_files[@]; do
	source $file
done

if [[ -d $DOTFILES/zsh/functions ]]; then
	for func in $DOTFILES/zsh/functions/*(:t); autoload -U $func
fi

# initialize autocomplete
autoload -U bashcompinit
bashcompinit
autoload -U compinit add-zsh-hook
compinit

# setopt COMPLETE_ALIASES

prepend_path /usr/local/opt/grep/libexec/gnubin
prepend_path /usr/local/sbin
prepend_path $DOTFILES/bin
prepend_path $HOME/bin

# define the code directory
# This is where my code exists and where I want the `c` autocomplete to work from exclusively
if [[ -d ~/ws ]]; then
	export CODE_DIR=~/ws
elif [[ -d ~/Projects ]]; then
	export CODE_DIR=~/Projects
fi

# display how long all tasks over 10 seconds take
export REPORTTIME=10
export KEYTIMEOUT=1              # 10ms delay for key sequences

setopt NO_BG_NICE
setopt NO_HUP                    # don't kill background jobs when the shell exits
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS
setopt LOCAL_TRAPS
setopt PROMPT_SUBST

# history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt EXTENDED_HISTORY          # write the history file in the ":start:elapsed;command" format.
setopt HIST_REDUCE_BLANKS        # remove superfluous blanks before recording entry.
setopt SHARE_HISTORY             # share history between all sessions.
setopt HIST_IGNORE_ALL_DUPS      # delete old recorded entry if new entry is a duplicate.

# make terminal command navigation sane again
bindkey "^[[1;5C" forward-word                    # [Ctrl-right] - forward one word
bindkey "^[[1;5D" backward-word                   # [Ctrl-left] - backward one word
bindkey '^[^[[C' forward-word                     # [Ctrl-right] - forward one word
bindkey '^[^[[D' backward-word                      # [Ctrl-left] - backward one word
bindkey '^[[1;3D' beginning-of-line                 # [Alt-left] - beginning of line
bindkey '^[[1;3C' end-of-line                       # [Alt-right] - end of line
bindkey '^[[5D' beginning-of-line                   # [Alt-left] - beginning of line
bindkey '^[[5C' end-of-line                         # [Alt-right] - end of line
bindkey '^?' backward-delete-char                   # [Backspace] - delete backward
if [[ "${terminfo[kdch1]}" != "" ]]; then
	bindkey "${terminfo[kdch1]}" delete-char        # [Delete] - delete forward
else
	bindkey "^[[3~" delete-char                     # [Delete] - delete forward
	bindkey "^[3;5~" delete-char
	bindkey "\e[3~" delete-char
fi
bindkey "^A" vi-beginning-of-line
bindkey -M viins "^F" vi-forward-word               # [Ctrl-f] - move to next word
bindkey -M viins "^E" vi-add-eol                    # [Ctrl-e] - move to end of line
bindkey "^J" history-beginning-search-forward
bindkey "^K" history-beginning-search-backward

# matches case insensitive for lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending
# default to file completion
zstyle ':completion:*' completer _expand _complete _files _correct _approximate
# enable verbose mode for zsh completion system.
zstyle ':completion:*' verbose yes
# set the format for completion descriptions with bold formatting.
zstyle ':completion:*:descriptions' format '%B%d%b'
# set the format for messages shown during completion.
zstyle ':completion:*:messages' format '%d'
# customize the format of warnings when no matches are found.
zstyle ':completion:*:warnings' format 'No matches for: %d'
# disable grouping of completion results by category.
zstyle ':completion:*' group-name ''
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no

########################################################
# Shell setup
########################################################

# source plugins from sheldon
eval "$(sheldon source)"

# p10k: run `p10k configure` or edit ~/.config/prompt/p10k.zsh
[[ -f $POWERLEVEL9K_CONFIG_DIR/p10k.zsh ]] && source $POWERLEVEL9K_CONFIG_DIR/p10k.zsh
[[ -f $POWERLEVEL9K_CONFIG_DIR/p10k.mise.zsh ]] && source $POWERLEVEL9K_CONFIG_DIR/p10k.mise.zsh
unset ZSH_AUTOSUGGEST_USE_ASYNC # https://github.com/romkatv/powerlevel10k/issues/1554

if [ -f $HOME/.fzf.zsh ]; then
	zvm_after_init_commands+=("source $HOME/.fzf.zsh")
	export FZF_DEFAULT_COMMAND='fd --type f'
	export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

export ZVM_INIT_MODE='sourcing'

# add color to some commands
export MANPAGER="sh -c 'sed -u -e \"s/\\x1B\[[0-9;]*m//g; s/.\\x08//g\" | bat -p -lman'"
export MANROFFOPT="-c"
export GREP_OPTIONS='--color=auto'

# To make fzf-tab follow FZF_DEFAULT_OPTS.
# NOTE: This may lead to unexpected behavior since some flags break this plugin. See Aloxaf/fzf-tab#455.
zstyle ':fzf-tab:*' use-fzf-default-opts yes
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'


export CATPPUCCIN_THEME="$(appearance)"
source $XDG_CONFIG_HOME/catppuccin/init.sh
alias themeup='CATPPUCCIN_THEME="$(appearance)" source $XDG_CONFIG_HOME/catppuccin/init.sh'

# start theme monitor
# theme-monitor | while read -r theme; do
# 	CATPPUCCIN_THEME="$theme"
# 	source $XDG_CONFIG_HOME/catppuccin/init.sh
# done &

# If a ~/.zshrc.local exists, source it
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local
# If a ~/.localrc zshrc exists, source it
[[ -a ~/.localrc ]] && source ~/.localrc

source "${HOME}/.config/op/plugins.sh"
alias l=ls
alias ll=ls -al
