#!/usr/bin/env bash

show_help() {
	cat << 'EOF'
jwt - Decode and verify JWT tokens

SYNOPSIS
  jwt [OPTIONS] TOKEN [PART]

DESCRIPTION
  Decodes JWT tokens and optionally verifies their signatures.
  Can display either the header or payload part of the token.

OPTIONS
  -h, --help            Show this help message and exit
  --verify SECRET       Verify signature using provided secret/key

ARGUMENTS
  TOKEN                JWT token to decode
  PART                 Part to display (header or payload, default: payload)

REQUIREMENTS
  openssl              For signature verification
  jq                   For JSON formatting
  base64              For base64 decoding

EXAMPLES
  # Decode payload (default)
  jwt eyJ...xyz

  # Decode header
  jwt eyJ...xyz header

  # Verify signature
  jwt eyJ...xyz --verify secretkey

EXIT STATUS
  0    Success
  1    Error (invalid token format or content)
  2    Error (verification failed or unsupported algorithm)

SEE ALSO
  openssl(1), jq(1), base64(1)
EOF
	exit 0
}

decode_base64_url() {
	local input="$1"
	local len=$((${#input} % 4))
	
	case $len in
		2) input+="==" ;;
		3) input+="=" ;;
	esac
	
	echo "$input" | tr '_-' '/+' | base64 -d
}

verify_signature() {
	local token="$1"
	local secret="$2"
	local header payload signature signing_input
	
	header="$(echo -n "$token" | cut -d "." -f1)"
	payload="$(echo -n "$token" | cut -d "." -f2)"
	signature="$(echo -n "$token" | cut -d "." -f3)"
	signing_input="${header}.${payload}"
	
	local alg
	alg="$(decode_base64_url "$header" | jq -r .alg)"
	
	case "$alg" in
		"HS256")
			local expected
			expected=$(echo -n "$signing_input" | \
				openssl dgst -binary -sha256 -hmac "$secret" | \
				base64 | tr '+/' '-_' | tr -d '=')
			if [[ "$signature" == "$expected" ]]; then
				echo "Signature verified (HS256)" >&2
				return 0
			fi
			;;
		"HS384")
			local expected
			expected=$(echo -n "$signing_input" | \
				openssl dgst -binary -sha384 -hmac "$secret" | \
				base64 | tr '+/' '-_' | tr -d '=')
			if [[ "$signature" == "$expected" ]]; then
				echo "Signature verified (HS384)" >&2
				return 0
			fi
			;;
		"HS512")
			local expected
			expected=$(echo -n "$signing_input" | \
				openssl dgst -binary -sha512 -hmac "$secret" | \
				base64 | tr '+/' '-_' | tr -d '=')
			if [[ "$signature" == "$expected" ]]; then
				echo "Signature verified (HS512)" >&2
				return 0
			fi
			;;
		"RS256"|"RS384"|"RS512")
			echo "RSA signatures not implemented yet" >&2
			return 2
			;;
		*)
			echo "Unsupported algorithm: $alg" >&2
			return 2
			;;
	esac
	
	echo "Signature verification failed" >&2
	return 1
}

die() {
	local msg=$1
	local code=${2-1} # default exit status 1
	echo "$msg" >&2
	exit "$code"
}

parse_params() {
	token=""
	part="2"
	verify_mode=false
	secret=""

	while :; do
		case "${1-}" in
		-h | --help) show_help ;;
		--verify)
			verify_mode=true
			secret="${2-}"
			shift
			;;
		header) part="1" ;;
		payload) part="2" ;;
		-?*) die "Unknown option: $1" ;;
		*) break ;;
		esac
		shift
	done

	args=("$@")
	[[ ${#args[@]} -eq 0 ]] && die "Missing required argument: TOKEN"
	token="${args[0]}"

	[[ ! "$token" =~ ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]] && {
		die "Invalid JWT format"
	}

	return 0
}

parse_params "$@"

if [[ "$verify_mode" == true ]]; then
	verify_signature "$token" "$secret" || exit $?
fi

decode_base64_url "$(echo -n "$token" | cut -d "." -f "$part")" | jq . || {
	die "Invalid JWT content"
}
