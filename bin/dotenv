#!/usr/bin/env bash

show_help() {
	cat << 'EOF'
dotenv - Load environment variables from .env files

SYNOPSIS
  dotenv [OPTIONS] [COMMAND [ARGS...]]

DESCRIPTION
  Load environment variables from a .env file and execute a command with the
  loaded environment.

OPTIONS
  -e FILES          Specify .env files to load, can be specified multiple times (default: .env)
  -d, --debug       Show debug output (default: false)
  -h, --help        Show this help message and exit

ARGUMENTS
  COMMAND           Command to execute with loaded environment
  ARGS              Arguments to pass to the command

EXAMPLES
  # Execute command with environment from .env
  dotenv go run main.go

  # Specify custom .env files
  dotenv -e .env -e .env.production python app.py

  # Use with any command
  dotenv -e .env.local npm start

.ENV FILE FORMAT
  The .env file format supports:
  
  # Comments (lines starting with #)
  DATABASE_URL=postgres://localhost:5432/mydb
  
  # Quoted values (single or double quotes)
  API_KEY="secret key with spaces"
  SECRET='another secret'
  
  # Multiline values
  CERTIFICATE="-----BEGIN CERTIFICATE-----
  MIIBkTCB+wIJANE...
  -----END CERTIFICATE-----"
  
  # Inline comments (ignored in unquoted values)
  PORT=3000  # Default port

EXIT STATUS
  0    Success
  1    Error (file not found, parse error, etc.)

SEE ALSO
  env(1), export(1), source(1)

EOF
}

# Initialize variables
env_files=()
command=()
debug=false

# Parse command line options
while [[ $# -gt 0 ]]; do
	case $1 in
		-e)
			if [[ -n "$2" ]]; then
				env_files+=("$2")
				shift 2
			else
				echo "Error: -e option requires a file argument" >&2
				echo "Try 'dotenv --help' for more information." >&2
				exit 1
			fi
			;;
		-h|--help)
			show_help
			exit 0
			;;
		-d|--debug)
			debug=true
			shift
			;;
		-*)
			echo "Error: Unknown option $1" >&2
			echo "Try 'dotenv --help' for more information." >&2
			exit 1
			;;
		*)
			# Add the current argument to command array and shift
			command+=("$1")
			shift
			# Add any remaining arguments to command array
			while [[ $# -gt 0 ]]; do
				command+=("$1")
				shift
			done
			;;
	esac
done

# Check if command is provided
if [[ ${#command[@]} -eq 0 ]]; then
	echo "Error: No command specified" >&2
	echo "Try 'dotenv --help' for more information." >&2
	exit 1
fi

# Function to parse a single .env file
parse_env_file() {
	local file="$1"

	if [[ ! -f "$file" ]]; then
		echo "Warning: .env file '$file' not found" >&2
		return 1
	fi
	
	local var_name=""
	local var_value=""
	local in_quotes=false
	local quote_char=""
	
	[[ "$debug" == true ]] && echo "Parsing .env file: $file" >&2
	while IFS= read -r line || [[ -n "$line" ]]; do
		[[ "$debug" == true ]] && echo "Processing line: '$line'" >&2
		
		if [[ $in_quotes == true ]]; then
			[[ "$debug" == true ]] && echo "  In quotes mode, looking for: $quote_char" >&2
			# In multiline quote
			if [[ "$line" =~ (.*)${quote_char}[[:space:]]*$ ]]; then
				# End multiline
				[[ "$debug" == true ]] && echo "  Found closing quote" >&2
				if [[ -n "$var_value" ]]; then
					var_value+=$'\n'"${BASH_REMATCH[1]}"
				else
					var_value="${BASH_REMATCH[1]}"
				fi
				[[ "$quote_char" == '"' ]] && var_value=$(printf '%b' "$var_value")
				temp_vars+=("$var_name=$var_value")
				[[ "$debug" == true ]] && echo "  Added multiline var: $var_name" >&2
				in_quotes=false
				quote_char=""
				var_name=""
				var_value=""
			else
				# Continue multiline
				[[ "$debug" == true ]] && echo "  Continuing multiline" >&2
				if [[ -n "$var_value" ]]; then
					var_value+=$'\n'"$line"
				else
					var_value="$line"
				fi
			fi
		else
			# Skip empty lines and comments when not in quotes
			if [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]]; then
				[[ "$debug" == true ]] && echo "  Skipping empty/comment line" >&2
				continue
			fi
			
			# Look for variable assignment
			if [[ "$line" =~ ^[[:space:]]*([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*=[[:space:]]*(.*) ]]; then
				var_name="${BASH_REMATCH[1]}"
				var_value="${BASH_REMATCH[2]}"
				[[ "$debug" == true ]] && echo "  Found assignment: $var_name = '$var_value'" >&2
				
				# Check for quotes
				if [[ "$var_value" =~ ^([\"\']).* ]]; then
					quote_char="${var_value:0:1}"
					var_value="${var_value:1}"
					[[ "$debug" == true ]] && echo "  Found quote: $quote_char" >&2
					
					# Check if quote closes on same line
					if [[ "$var_value" =~ (.*)${quote_char}[[:space:]]*$ ]]; then
						# Single line quoted
						var_value="${BASH_REMATCH[1]}"
						[[ "$debug" == true ]] && echo "  Single line quoted value: '$var_value'" >&2
						[[ "$quote_char" == '"' ]] && var_value=$(printf '%b' "$var_value")
						temp_vars+=("$var_name=$var_value")
						[[ "$debug" == true ]] && echo "  Added single line var: $var_name" >&2
						var_name=""
						var_value=""
						quote_char=""
					else
						# Start multiline
						[[ "$debug" == true ]] && echo "  Starting multiline quote" >&2
						in_quotes=true
					fi
				else
					# Unquoted - strip inline comments
					var_value=$(echo "$var_value" | sed 's/[[:space:]]*#.*$//')
					[[ "$debug" == true ]] && echo "  Unquoted value: '$var_value'" >&2
					temp_vars+=("$var_name=$var_value")
					[[ "$debug" == true ]] && echo "  Added unquoted var: $var_name" >&2
					var_name=""
					var_value=""
				fi
			else
				[[ "$debug" == true ]] && echo "  Line doesn't match assignment pattern" >&2
			fi
		fi
	done < "$file"
	
	if [[ $in_quotes == true ]]; then
		echo "Warning: Unclosed quote in $file" >&2
		return 1
	fi
	
	return 0
}

# Initialize temp_vars array
temp_vars=()

# If no env files are specified, use the default .env file
if [[ ${#env_files[@]} -eq 0 ]]; then
	env_files=(".env")
fi

if [[ $debug == true ]]; then
	echo "env_files: ${env_files[@]}"
	echo "command: ${command[@]}"
fi

# Parse the .env file
for env_file in "${env_files[@]}"; do
	parse_env_file "$env_file"
done

# Execute command with loaded environment
if [[ ${#command[@]} -gt 0 ]]; then
	# Create env arguments from temp_vars
	env_args=()
	for var_assignment in "${temp_vars[@]}"; do
		# Only add valid assignments
		if [[ "$var_assignment" =~ ^([A-Za-z_][A-Za-z0-9_]*)=(.*)$ ]]; then
			env_args+=("$var_assignment")
		fi
	done
	
	[[ "$debug" == true ]] && echo "" >&2
	exec env "${env_args[@]}" "${command[@]}"
fi
