#!/usr/bin/env bash

generate_unique_filename() {
	local input="$1"
	local pattern="$2"
	local filename="${input%.*}"
	local extension="${input##*.}"
	local n=1
	local file

	# Default pattern if not provided
	if [[ -z $pattern ]]; then
		pattern="${filename}.\$n.${extension}"
	fi

	# Replace placeholders in the pattern
	file=$(eval echo "$pattern")

	while [[ -e $file ]]; do
		((n++))
		file=$(eval echo "$pattern")
	done

	echo "$file"
}

show_help() {
	cat << 'EOF'
increment-filename - Generate unique filenames with customizable patterns

SYNOPSIS
  increment-filename [OPTIONS] INPUT_FILENAME [PATTERN]

DESCRIPTION
  Generates a unique filename based on a pattern, automatically incrementing
  a counter if a file with the same name already exists.

OPTIONS
  -h, --help    Show this help message and exit

ARGUMENTS
  INPUT_FILENAME   Name of the input file (e.g., file.txt)
  PATTERN         (Optional) Pattern for naming the file
                  Default: ${filename}.$n.${extension}

PATTERN PLACEHOLDERS
  ${filename}     Base name of the input file without extension
  ${extension}    File extension of the input file
  $n              Counter for uniqueness

EXAMPLES
  # Generate with default pattern
  increment-filename file.txt
  # Generates file.1.txt if file.txt exists

  # Generate with custom pattern
  increment-filename file.txt '${filename}_v$n.${extension}'
  # Generates file_v1.txt if file_v0.txt exists

EXIT STATUS
  0    Success
  1    Error (missing input filename)

SEE ALSO
  mv(1), cp(1)
EOF
	exit 0
}

die() {
	local msg=$1
	local code=${2-1} # default exit status 1
	echo "$msg" >&2
	exit "$code"
}

parse_params() {
	input_file=""
	pattern=""

	while :; do
		case "${1-}" in
		-h | --help) show_help ;;
		-?*) die "Unknown option: $1" ;;
		*) break ;;
		esac
		shift
	done

	args=("$@")
	[[ ${#args[@]} -eq 0 ]] && die "Missing required argument: INPUT_FILENAME"
	input_file="${args[0]}"
	pattern="${args[1]-}"

	return 0
}

parse_params "$@"
generate_unique_filename "$input_file" "$pattern"
